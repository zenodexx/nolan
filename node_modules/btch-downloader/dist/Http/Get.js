"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = require("https");
const url_1 = require("url");
async function HttpGet(endpoint, url, version, timeout, baseUrl) {
    return new Promise((resolve, reject) => {
        try {
            const BaseUrl = new url_1.URL(`${baseUrl}/${endpoint}`);
            BaseUrl.searchParams.append('url', url);
            const options = {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': `btch/${version}`,
                    'X-Client-Version': version
                },
                timeout: timeout
            };
            const req = (0, https_1.request)(BaseUrl, options, (res) => {
                let data = '';
                res.on('data', (chunk) => {
                    data += chunk;
                });
                res.on('end', () => {
                    try {
                        if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {
                            throw new Error(`${res.statusCode} ${res.statusMessage || 'Unknown'}`);
                        }
                        const parsedData = JSON.parse(data);
                        resolve(parsedData);
                    }
                    catch (error) {
                        reject(new Error(error instanceof Error ? error.message : 'Unknown error occurred'));
                    }
                });
            });
            req.on('error', (error) => {
                reject(new Error(error.message));
            });
            req.on('timeout', () => {
                req.destroy();
                reject(new Error('Request timed out'));
            });
            req.end();
        }
        catch (error) {
            reject(new Error(error instanceof Error ? error.message : 'Unknown error occurred'));
        }
    });
}
exports.default = HttpGet;
//# sourceMappingURL=Get.js.map