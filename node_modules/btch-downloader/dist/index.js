"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issues = exports.developer = exports.version = void 0;
exports.fbdown = fbdown;
exports.igdl = igdl;
exports.ttdl = ttdl;
exports.twitter = twitter;
exports.youtube = youtube;
exports.mediafire = mediafire;
exports.capcut = capcut;
exports.gdrive = gdrive;
exports.pinterest = pinterest;
exports.aio = aio;
exports.xiaohongshu = xiaohongshu;
exports.douyin = douyin;
exports.snackvideo = snackvideo;
const site_1 = __importDefault(require("./Defaults/site"));
const config_json_1 = __importDefault(require("./Watermark/config.json"));
const package_json_1 = require("../package.json");
Object.defineProperty(exports, "version", { enumerable: true, get: function () { return package_json_1.version; } });
const Get_1 = __importDefault(require("./Http/Get"));
const { config, issues } = site_1.default;
exports.issues = issues;
const wm = config_json_1.default.dev;
exports.developer = wm;
const timeout = 60000;
const formatErrorResponse = (error) => ({
    developer: wm,
    status: false,
    message: error instanceof Error ? error.message : 'Unknown error',
    note: `Please report issues to ${issues}`
});
async function ttdl(url) {
    try {
        const data = await (0, Get_1.default)('ttdl', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            title: data.title,
            title_audio: data.title_audio,
            thumbnail: data.thumbnail,
            video: data.video,
            audio: data.audio
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function igdl(url) {
    try {
        const data = await (0, Get_1.default)('igdl', url, package_json_1.version, timeout, config.baseUrl);
        if (!data || data.length === 0) {
            return {
                ...formatErrorResponse(new Error('No results found')),
                status: false
            };
        }
        return {
            developer: wm,
            status: true,
            result: data.map((item) => ({
                thumbnail: item.thumbnail,
                url: item.url,
                resolution: item.resolution,
                shouldRender: item.shouldRender
            }))
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function twitter(url) {
    try {
        const data = await (0, Get_1.default)('twitter', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            title: data.title,
            url: data.url
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function youtube(url) {
    try {
        const data = await (0, Get_1.default)('youtube', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            title: data.title,
            thumbnail: data.thumbnail,
            author: data.author,
            mp3: data.mp3,
            mp4: data.mp4
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function fbdown(url) {
    try {
        const data = await (0, Get_1.default)('fbdown', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            Normal_video: data.Normal_video,
            HD: data.HD
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function mediafire(url) {
    try {
        const data = await (0, Get_1.default)('mediafire', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            result: data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function capcut(url) {
    try {
        const data = await (0, Get_1.default)('capcut', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            ...data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function aio(url) {
    try {
        const data = await (0, Get_1.default)('aio', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            ...data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function gdrive(url) {
    try {
        const data = await (0, Get_1.default)('gdrive', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            result: data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function pinterest(query) {
    try {
        const data = await (0, Get_1.default)('pinterest', query, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            result: data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function xiaohongshu(url) {
    try {
        const data = await (0, Get_1.default)('rednote', url, package_json_1.version, timeout, config.baseUrl);
        if (!data || !data.noteId) {
            return {
                ...formatErrorResponse(new Error('No results found')),
                status: false
            };
        }
        return {
            developer: wm,
            status: true,
            result: data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function douyin(url) {
    try {
        const data = await (0, Get_1.default)('douyin', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            result: data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
async function snackvideo(url) {
    try {
        const data = await (0, Get_1.default)('snackvideo', url, package_json_1.version, timeout, config.baseUrl);
        return {
            developer: wm,
            status: true,
            result: data
        };
    }
    catch (error) {
        return { ...formatErrorResponse(error), status: false };
    }
}
//# sourceMappingURL=index.js.map